
Resources:
  bookTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Book
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bookId
          AttributeType: S
      KeySchema:
        - AttributeName: bookId
          KeyType: HASH

  orderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Order
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bookId
          AttributeType: S
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: orderId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: byOrder
          KeySchema:
            - AttributeName: bookId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: book-store-user-pool
      UsernameAttributes:
        - email

  cognitoUserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref cognitoUserPool
      ClientName: bookstore-client

  cognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admin users belong to this group
      GroupName: Admin
      Precedence: 0
      RoleArn: !GetAtt cognitoAdminIamRole.Arn
      UserPoolId: !Ref cognitoUserPool
  
  cognitoCustomerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Customers belong to this group
      GroupName: Customer
      Precedence: 1
      RoleArn: !GetAtt cognitoUserIamRole.Arn
      UserPoolId: !Ref cognitoUserPool

  cognitoUserIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref cognitoUserPool
      Description: This is the iam role that customer group users assume
      Policies: 
        - PolicyName: "bookstore-customer-group-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "dynamodb: *"
                Resource:
                  - !GetAtt orderTable.Arn

              - Effect: Allow
                Action: 
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:BatchGetItem"
                Resource:
                  - !GetAtt bookTable.Arn
      RoleName: bookstore-customer-role

  cognitoAdminIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref cognitoUserPool
      Description: This is the iam role that admin group users assume
      Policies: 
        - PolicyName: "bookstore-admin-group-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "dynamodb: *"
                Resource:
                  - !GetAtt bookTable.Arn
                  - !GetAtt orderTable.Arn
      RoleName: bookstore-admin-role